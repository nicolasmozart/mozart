import mongoose from 'mongoose';
import { config } from './env';
import { logAction, logError, logDatabase } from './logger';

const connectDB = async (): Promise<void> => {
  try {
    const startTime = Date.now();
    await mongoose.connect(config.mongoURI!);
    const duration = Date.now() - startTime;
    
    console.log('‚úÖ Conectado a MongoDB exitosamente');
    
    // Log de conexi√≥n exitosa
    logAction('DATABASE_CONNECTED', {
      uri: config.mongoURI!.replace(/\/\/[^:]+:[^@]+@/, '//***:***@'), // Ocultar credenciales
      duration: `${duration}ms`
    });
    
    // Log de operaci√≥n de BD
    logDatabase('CONNECT', 'mongodb', {
      status: 'success',
      duration: duration
    });
  } catch (error) {
    console.error('‚ùå Error al conectar a MongoDB:', error);
    
    // Log de error de conexi√≥n
    logError(error as Error, 'Database Connection');
    
    process.exit(1);
  }
};

// Eventos de conexi√≥n
mongoose.connection.on('connected', () => {
  console.log('üîó Mongoose conectado a MongoDB');
  
  // Log de evento de conexi√≥n
  logAction('MONGOOSE_CONNECTED', {
    connectionId: mongoose.connection.id,
    host: mongoose.connection.host,
    port: mongoose.connection.port,
    name: mongoose.connection.name
  });
});

mongoose.connection.on('error', (err) => {
  console.error('‚ùå Error de conexi√≥n de Mongoose:', err);
  
  // Log de error de conexi√≥n
  logError(err, 'Mongoose Connection Error');
});

mongoose.connection.on('disconnected', () => {
  console.log('üîå Mongoose desconectado de MongoDB');
  
  // Log de desconexi√≥n
  logAction('MONGOOSE_DISCONNECTED', {
    reason: 'Connection lost or closed'
  });
});

// Manejo de cierre graceful
process.on('SIGINT', async () => {
  try {
    await mongoose.connection.close();
    console.log('üîå Conexi√≥n a MongoDB cerrada por terminaci√≥n de la aplicaci√≥n');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error al cerrar la conexi√≥n:', error);
    process.exit(1);
  }
});

export default connectDB;
